name: test-automatic-release
on:
  workflow_dispatch:
    inputs:
      mailu_version:
        description: 'The main version that is build. E.g. master or x.y.'
        required: true
        type: string
      pinned_mailu_version:
        description: 'The specific version that is build. E.g. commit hash or x.y.z.'
        required: true
        type: string

concurrency: ci-release-${{ github.ref }}

jobs:
# This job calculates all global job variables that are required by all the subsequent jobs.
# All subsequent jobs will retrieve and use these variables. This way the variables only have to be derived once.

#This job creates a tagged release. A tag is created for the pinned version x.y.z. The GH release refers to this tag.
  tag-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          # fetch-depth 0 is required to also retrieve all tags.
          fetch-depth: 0
        # A bug in actions/checkout@v3 results in all files having mtime of the job running.  
      - name: Restore Timestamps
        uses: chetan/git-restore-mtime-action@v1          
      - name: Retrieve global variables
        shell: bash
        run: |
          echo "MAILU_VERSION=${{ inputs.mailu_version }}" >> $GITHUB_ENV
          echo "PINNED_MAILU_VERSION=${{ inputs.pinned_mailu_version }}" >> $GITHUB_ENV
      - name: Create tag for branch x.y.
        shell: bash
        run: |
          echo git tag ${{ env.PINNED_MAILU_VERSION }} $(/usr/bin/git rev-parse HEAD)
          git tag ${{ env.PINNED_MAILU_VERSION }} $(/usr/bin/git rev-parse HEAD)
          git push origin ${{ env.PINNED_MAILU_VERSION }}
      - name: Debug, get list of files
        shell: bash
        run: |
          ls -Artl towncrier/newsfragments
      - name: Get latest changelog
        id: changelog
        shell: bash
        run: |
            pushd . && cd towncrier/newsfragments && ls -Art | tail -n 1 | cut -d. -f1 | xargs -0I % echo "issue=%" >> $GITHUB_OUTPUT && popd
            pushd . && cd towncrier/newsfragments && ls -Art | tail -n 1 | xargs cat | xargs -0I % echo "content=%" >> $GITHUB_OUTPUT && popd
      - name: Construct message for release
        shell: bash
        env:
          issue: "${{ steps.changelog.outputs.issue }}"
          changelog: "${{ steps.changelog.outputs.content }}"
        run: |
            message="This is a new automatic release of Mailu. The new version can be seen in the tag name.
            The main version X.Y (e.g. 1.9) will always reflect the latest version of the branch. To update your Mailu installation simply pull the latest images \`docker compose pull && docker compose up -d\`.
            The pinned version X.Y.Z (e.g. 1.9.1) is not updated. It is pinned to the commit that was used for creating this release. You can use a pinned version to make sure your Mailu installation is not suddenly updated when recreating containers. The pinned version allows the user to manually update. It also allows to go back to a previous pinned version.
            
            Changelog:
            ${{ env.changelog }}
            
            This release was triggered by PR/Issue [${{ env.issue }}](https://github.com/Mailu/Mailu/issues/${{ env.issue }}).
            
            The release notes of the original main release can be accessed via menu item 'Release notes' on [mailu.io](https://mailu.io/).
            " && echo "$message" >> release_note.md       
      - name: Show release note
        shell: bash
        run: |
            cat release_note.md
      - name: Create release for tag x.y.z.
        uses: ncipollo/release-action@v1
        with:
          bodyFile: "release_note.md"
          tag: ${{ env.PINNED_MAILU_VERSION }}
          token: ${{ secrets.GITHUB_TOKEN }}
