name: CI
on:
  push:
    branches:
      - staging
      - testing
      - '1.8'
      - '1.9'
      - '1.10'
      - '1.11'
      - master
      # test branches, e.g. test-debian
      - test-*

concurrency: ci-${{ github.ref }}

###############################################
# REQUIRED secrets
# DOCKER_UN: ${{ secrets.Docker_Login }}
#    Username of docker login for pushing the images to repo $DOCKER_ORG and $DOCKER_ORG_TESTS
# DOCKER_PW: ${{ secrets.Docker_Password }}
#    Password of docker login for pushing the images to repo $DOCKER_ORG and $DOCKER_ORG_TESTS
# Add the above secrets to your github repo to determine where the images will be pushed.
################################################
# Code block that is used as one liner.
##!/bin/bash
#version=$( git tag --sort=version:refname --list "{{ env.MAILU_VERSION }}.*" | tail -1  )
#root_version=${version%.*}
#patch_version=${version##*.}
#if [ "$patch_version" == "" ]
#then
#  pinned_version={{ env.MAILU_VERSION }}.0
#else
#  pinned_version=$root_version.$(expr $patch_version + 1)
#fi
#echo "PINNED_MAILU_VERSION=$pinned_version" >> $GITHUB_ENV
env:
  DOCKER_ORG: diman
  DOCKER_ORG_TEST: diman
  HCL_FILE: ./tests/build.hcl

jobs:
  derive-variables:
    name: derive variables
    runs-on: ubuntu-latest
    outputs:
        MAILU_VERSION: ${{ env.MAILU_VERSION }}
        PINNED_MAILU_VERSION: ${{ env.PINNED_MAILU_VERSION }}
        DOCKER_ORG: ${{ env.DOCKER_ORG_DERIVED }}
        BRANCH: ${{ env.BRANCH }}
    steps:
      - uses: actions/checkout@v3
        with:
          # fetch-depth 0 is required to also retrieve all tags.
          fetch-depth: 0
      - name: Extract branch name
        shell: bash
        run: |
          echo "BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
        #For branch TESTING, we set the image tag to PR-xxxx
      - name: Derive MAILU_VERSION and PINNED_MAILU_VERSION for branch testing
        if: env.BRANCH == 'testing'
        shell: bash
        env:
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
        run: |
          echo "MAILU_VERSION=pr-${COMMIT_MESSAGE//[!0-9]/}" >> $GITHUB_ENV
          echo "PINNED_MAILU_VERSION=pr-${COMMIT_MESSAGE//[!0-9]/}" >> $GITHUB_ENV
          echo "DOCKER_ORG_DERIVED=${{ env.DOCKER_ORG_TEST }}" >> $GITHUB_ENV
      - name: Derive MAILU_VERSION for other branches than testing
        if: env.BRANCH != 'testing'
        shell: bash
        run: |
          echo "MAILU_VERSION=${{ env.BRANCH }}" >> $GITHUB_ENV
          echo "DOCKER_ORG_DERIVED=${{ env.DOCKER_ORG }}" >> $GITHUB_ENV
      - name: Derive PINNED_MAILU_VERSION for normal release x.y
        if: env.BRANCH != 'testing' && env.BRANCH != 'staging' && env.BRANCH != 'master'
        shell: bash
        run: |
          version=$( git tag --sort=version:refname --list "${{ env.MAILU_VERSION }}.*" | tail -1  );root_version=${version%.*};patch_version=${version##*.};if [ "$patch_version" == "" ]; then pinned_version=${{ env.MAILU_VERSION }}.0; else pinned_version=$root_version.$(expr $patch_version + 1); fi;echo "PINNED_MAILU_VERSION=$pinned_version" >> $GITHUB_ENV
      - name: Derive PINNED_MAILU_VERSION for staging
        if: env.BRANCH == 'staging'
        shell: bash
        run: |
          echo "PINNED_MAILU_VERSION=staging" >> $GITHUB_ENV
      - name: Derive PINNED_MAILU_VERSION for master
        if: env.BRANCH == 'master'
        shell: bash
        env:
          GITHUB_SHA: ${{ env.GITHUB_SHA }}
        run: |
          echo "PINNED_MAILU_VERSION=$GITHUB_SHA" >> $GITHUB_ENV

  targets:
    name: create targets
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.targets.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Create matrix
        id: targets
        run: |
          echo ::set-output name=matrix::$(docker buildx bake -f ${{env.HCL_FILE}} --print | jq -cr '.group.default.targets')
      - name: Show matrix
        run: |
          echo ${{ steps.targets.outputs.matrix }}

  build:
    name: Build images
    needs:
      - derive-variables
      - targets
    strategy:
      fail-fast: false
      matrix: 
        target: ${{ fromJson(needs.targets.outputs.matrix) }}      
    runs-on: ubuntu-latest
    permissions: 
     contents: read
     packages: write     
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.Docker_Login }}
          password: ${{ secrets.Docker_Password }}        
      - name: setup builder instance
        run: docker buildx create --use
      - name: Build all docker images
        env:
          DOCKER_ORG: ${{ needs.derive-variables.outputs.DOCKER_ORG }}
          MAILU_VERSION: ${{ needs.derive-variables.outputs.MAILU_VERSION }}
          PINNED_MAILU_VERSION: ${{ needs.derive-variables.outputs.PINNED_MAILU_VERSION }}       
        uses: docker/bake-action@v2
        with:
          files: ${{env.HCL_FILE}}
          targets: ${{ matrix.target }}
          load: false
          push: false
          set: |
            *.cache-from=type=gha,scope=build-${{ matrix.target }}
            *.cache-to=type=gha,scope=build-${{ matrix.target }},mode=max
            *.platform=linux/amd64

  tests:
    name: tests
    runs-on: ubuntu-latest
    permissions: 
     contents: read
     packages: read
    needs:
      - derive-variables
      - targets
      - build 
    strategy:
      fail-fast: false
      matrix:
        target: ["core", "fetchmail", "filters", "rainloop", "roundcube", "webdav"]
        time: ["2"]
        include:
          - target: "filters"
            time: "3"        
    steps:
      - uses: actions/checkout@v3
      - uses: crazy-max/ghaction-github-runtime@v2
      - name: setup buildx instance
        run: docker buildx create --use
      - name: Build docker images for testing from cache
        env:
          DOCKER_ORG: ${{ needs.derive-variables.outputs.DOCKER_ORG }}
          MAILU_VERSION: ${{ needs.derive-variables.outputs.MAILU_VERSION }}
          PINNED_MAILU_VERSION: ${{ needs.derive-variables.outputs.PINNED_MAILU_VERSION }}         
        uses: docker/bake-action@v2
        with:
          files: ${{env.HCL_FILE}}
          load: true
          push: false
          set: |
            *.cache-from=type=gha,scope=build-setup
            *.cache-from=type=gha,scope=build-admin
            *.cache-from=type=gha,scope=build-antispam
            *.cache-from=type=gha,scope=build-antispam
            *.cache-from=type=gha,scope=build-front
            *.cache-from=type=gha,scope=build-imap
            *.cache-from=type=gha,scope=build-smtp
            *.cache-from=type=gha,scope=build-rainloop
            *.cache-from=type=gha,scope=build-roundcube
            *.cache-from=type=gha,scope=build-antivirus
            *.cache-from=type=gha,scope=build-fetchmail
            *.cache-from=type=gha,scope=build-resolver
            *.cache-from=type=gha,scope=build-traefik-certdumper
            *.cache-from=type=gha,scope=build-webdav
            *.platform=linux/amd64        
      - name: Install python packages
        run: python3 -m pip install -r tests/requirements.txt
      - name: Copy all certs
        run: sudo -- sh -c 'mkdir -p /mailu && cp -r tests/certs /mailu && chmod 600 /mailu/certs/*'
      - name: Test ${{ matrix.target }}
        run: python tests/compose/test.py ${{ matrix.target }} 3
        env:
          MAILU_VERSION: ${{ needs.derive-variables.outputs.MAILU_VERSION }}
          PINNED_MAILU_VERSION: ${{ needs.derive-variables.outputs.MAILU_VERSION }}
          DOCKER_ORG: ${{ needs.derive-variables.outputs.DOCKER_ORG }}

  deploy:
    name: Deploy images
    # Deploying is not required for staging
    if: needs.derive-variables.outputs.BRANCH != 'staging'
    runs-on: ubuntu-latest
    needs:
      - derive-variables
      - build
      - tests
    steps:
      - uses: actions/checkout@v3  
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.Docker_Login }}
          password: ${{ secrets.Docker_Password }}
        # needed for gha cache?
      - uses: crazy-max/ghaction-github-runtime@v2
      - name: setup buildx instance
        run: docker buildx create --use
      - name: Deploy images to docker hub. Build.hcl contains the logic for the tags that are pushed.
        env:
          DOCKER_ORG: ${{ needs.derive-variables.outputs.DOCKER_ORG }}
          MAILU_VERSION: ${{ needs.derive-variables.outputs.MAILU_VERSION }}
          PINNED_MAILU_VERSION: ${{ needs.derive-variables.outputs.PINNED_MAILU_VERSION }}         
        uses: docker/bake-action@v2
        with:
          files: ${{env.HCL_FILE}}
          push: true
          set: |
            *.cache-from=type=gha,scope=build-setup
            *.cache-from=type=gha,scope=build-admin
            *.cache-from=type=gha,scope=build-antispam
            *.cache-from=type=gha,scope=build-antispam
            *.cache-from=type=gha,scope=build-front
            *.cache-from=type=gha,scope=build-imap
            *.cache-from=type=gha,scope=build-smtp
            *.cache-from=type=gha,scope=build-rainloop
            *.cache-from=type=gha,scope=build-roundcube
            *.cache-from=type=gha,scope=build-antivirus
            *.cache-from=type=gha,scope=build-fetchmail
            *.cache-from=type=gha,scope=build-resolver
            *.cache-from=type=gha,scope=build-traefik-certdumper
            *.cache-from=type=gha,scope=build-webdav
            *.platform=linux/amd64    
            
  tag-release:
    if: needs.derive-variables.outputs.BRANCH != 'testing' && needs.derive-variables.outputs.BRANCH != 'staging' && needs.derive-variables.outputs.BRANCH != 'master'
    runs-on: ubuntu-latest
    needs:
      - deploy
      - derive-variables
    steps:
      - uses: actions/checkout@v3
        with:
          # fetch-depth 0 is required to also retrieve all tags.
          fetch-depth: 0
      - name: Create tag for branch x.y.
        shell: bash
        run: |
          echo git tag ${{ needs.derive-variables.outputs.PINNED_MAILU_VERSION }} $(/usr/bin/git rev-parse HEAD)
          git tag ${{ needs.derive-variables.outputs.PINNED_MAILU_VERSION }} $(/usr/bin/git rev-parse HEAD)
          git push origin ${{ needs.derive-variables.outputs.PINNED_MAILU_VERSION }}
      - name: Create release for tag x.y.z.
        uses: ncipollo/release-action@v1
        with:
          bodyFile: "RELEASE_TEMPLATE.md"
          tag: ${{ needs.derive-variables.outputs.PINNED_MAILU_VERSION }}
          token: ${{ secrets.GITHUB_TOKEN }}

 # This job is watched by bors. It only complets if building,testing and deploy worked.
  ci-success:
    name: CI-Done
    #Returns true when none of the **previous** steps have failed or have been canceled.
    if: success()
    needs:
      - deploy
    runs-on: ubuntu-latest
    steps:
      - name: CI/CD succeeded.
        run: exit 0
